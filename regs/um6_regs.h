
/* 
 * AUTOGENERATED FILE - DO NOT EDIT!
 * file generated using creghead: https://github.com/TobiasSimon/creghead
 */


#ifndef __UM6_REGS_H__
#define __UM6_REGS_H__



/* communication settings */
#define UM6_COMM (0x0)
/* packet broadcast frequency; freq = (280 / 255) * broadcast_rate + 20 */
#define UM6_COMM_GET_BC_RATE(x) \
   (((x) >> 0) & 0xff)
#define UM6_COMM_SET_BC_RATE(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

/* serial port baudrate; 000: 9600, 001: 14400, 010: 19200, 011 -> 38400, 100 -> 57600, 101 -> 115200 */
#define UM6_COMM_GET_BAUD_RATE(x) \
   (((x) >> 8) & 0x7)
#define UM6_COMM_SET_BAUD_RATE(x, v) \
   do {x &= ~(0x7 << 8); x |= (v & 0x7) << 8;} while(0)

/* GPS baudrate see BAUD_RATE for details */
#define UM6_COMM_GET_GPS_BAUD(x) \
   (((x) >> 11) & 0x7)
#define UM6_COMM_SET_GPS_BAUD(x, v) \
   do {x &= ~(0x7 << 11); x |= (v & 0x7) << 11;} while(0)

/* bit 14 ignored */

/* detailed satellite status transmission */
#define UM6_COMM_GET_SAT(x) \
   (((x) >> 15) & 1)
#define UM6_COMM_SET_SAT(x) \
   do {x |= 1 << 15;} while (0)
#define UM6_COMM_CLEAR_SAT(x) \
   do {x &= ~(1 << 15);} while (0)

/* satellite summary transmission */
#define UM6_COMM_GET_SUM(x) \
   (((x) >> 16) & 1)
#define UM6_COMM_SET_SUM(x) \
   do {x |= 1 << 16;} while (0)
#define UM6_COMM_CLEAR_SUM(x) \
   do {x &= ~(1 << 16);} while (0)

/* GPS course and velocity transmission */
#define UM6_COMM_GET_VEL(x) \
   (((x) >> 17) & 1)
#define UM6_COMM_SET_VEL(x) \
   do {x |= 1 << 17;} while (0)
#define UM6_COMM_CLEAR_VEL(x) \
   do {x &= ~(1 << 17);} while (0)

/* GPS relative position transmission */
#define UM6_COMM_GET_REL(x) \
   (((x) >> 18) & 1)
#define UM6_COMM_SET_REL(x) \
   do {x |= 1 << 18;} while (0)
#define UM6_COMM_CLEAR_REL(x) \
   do {x &= ~(1 << 18);} while (0)

/* GPS position transmission */
#define UM6_COMM_GET_POS(x) \
   (((x) >> 19) & 1)
#define UM6_COMM_SET_POS(x) \
   do {x |= 1 << 19;} while (0)
#define UM6_COMM_CLEAR_POS(x) \
   do {x &= ~(1 << 19);} while (0)

/* temperature transmission */
#define UM6_COMM_GET_TEMP(x) \
   (((x) >> 20) & 1)
#define UM6_COMM_SET_TEMP(x) \
   do {x |= 1 << 20;} while (0)
#define UM6_COMM_CLEAR_TEMP(x) \
   do {x &= ~(1 << 20);} while (0)

/* covariance matrix transmission */
#define UM6_COMM_GET_COV(x) \
   (((x) >> 21) & 1)
#define UM6_COMM_SET_COV(x) \
   do {x |= 1 << 21;} while (0)
#define UM6_COMM_CLEAR_COV(x) \
   do {x &= ~(1 << 21);} while (0)

/* euler angles transmission */
#define UM6_COMM_GET_EU(x) \
   (((x) >> 22) & 1)
#define UM6_COMM_SET_EU(x) \
   do {x |= 1 << 22;} while (0)
#define UM6_COMM_CLEAR_EU(x) \
   do {x &= ~(1 << 22);} while (0)

/* quaternion transmission */
#define UM6_COMM_GET_QT(x) \
   (((x) >> 23) & 1)
#define UM6_COMM_SET_QT(x) \
   do {x |= 1 << 23;} while (0)
#define UM6_COMM_CLEAR_QT(x) \
   do {x &= ~(1 << 23);} while (0)

/* processed magnetometer transmission */
#define UM6_COMM_GET_MP(x) \
   (((x) >> 24) & 1)
#define UM6_COMM_SET_MP(x) \
   do {x |= 1 << 24;} while (0)
#define UM6_COMM_CLEAR_MP(x) \
   do {x &= ~(1 << 24);} while (0)

/* processed accelerometer transmission */
#define UM6_COMM_GET_AP(x) \
   (((x) >> 25) & 1)
#define UM6_COMM_SET_AP(x) \
   do {x |= 1 << 25;} while (0)
#define UM6_COMM_CLEAR_AP(x) \
   do {x &= ~(1 << 25);} while (0)

/* processed gyroscope transmission */
#define UM6_COMM_GET_GP(x) \
   (((x) >> 26) & 1)
#define UM6_COMM_SET_GP(x) \
   do {x |= 1 << 26;} while (0)
#define UM6_COMM_CLEAR_GP(x) \
   do {x &= ~(1 << 26);} while (0)

/* raw magnetometer transmission */
#define UM6_COMM_GET_MR(x) \
   (((x) >> 27) & 1)
#define UM6_COMM_SET_MR(x) \
   do {x |= 1 << 27;} while (0)
#define UM6_COMM_CLEAR_MR(x) \
   do {x &= ~(1 << 27);} while (0)

/* raw accelerometer transmission */
#define UM6_COMM_GET_AR(x) \
   (((x) >> 28) & 1)
#define UM6_COMM_SET_AR(x) \
   do {x |= 1 << 28;} while (0)
#define UM6_COMM_CLEAR_AR(x) \
   do {x &= ~(1 << 28);} while (0)

/* raw gyroscope transmission */
#define UM6_COMM_GET_GR(x) \
   (((x) >> 29) & 1)
#define UM6_COMM_SET_GR(x) \
   do {x |= 1 << 29;} while (0)
#define UM6_COMM_CLEAR_GR(x) \
   do {x &= ~(1 << 29);} while (0)

/* broadcast mode */
#define UM6_COMM_GET_BEN(x) \
   (((x) >> 30) & 1)
#define UM6_COMM_SET_BEN(x) \
   do {x |= 1 << 30;} while (0)
#define UM6_COMM_CLEAR_BEN(x) \
   do {x &= ~(1 << 30);} while (0)

/* bit 31 ignored */

#define UM6_COMM_DEBUG(x) \
   do { printf("COMM: BC_RATE = %X, "\
      "BAUD_RATE = %X, "\
      "GPS_BAUD = %X, "\
      "SAT = %X, "\
      "SUM = %X, "\
      "VEL = %X, "\
      "REL = %X, "\
      "POS = %X, "\
      "TEMP = %X, "\
      "COV = %X, "\
      "EU = %X, "\
      "QT = %X, "\
      "MP = %X, "\
      "AP = %X, "\
      "GP = %X, "\
      "MR = %X, "\
      "AR = %X, "\
      "GR = %X, "\
      "BEN = %X\n", UM6_COMM_GET_BC_RATE(x), \
      UM6_COMM_GET_BAUD_RATE(x), \
      UM6_COMM_GET_GPS_BAUD(x), \
      UM6_COMM_GET_SAT(x), \
      UM6_COMM_GET_SUM(x), \
      UM6_COMM_GET_VEL(x), \
      UM6_COMM_GET_REL(x), \
      UM6_COMM_GET_POS(x), \
      UM6_COMM_GET_TEMP(x), \
      UM6_COMM_GET_COV(x), \
      UM6_COMM_GET_EU(x), \
      UM6_COMM_GET_QT(x), \
      UM6_COMM_GET_MP(x), \
      UM6_COMM_GET_AP(x), \
      UM6_COMM_GET_GP(x), \
      UM6_COMM_GET_MR(x), \
      UM6_COMM_GET_AR(x), \
      UM6_COMM_GET_GR(x), \
      UM6_COMM_GET_BEN(x)); } while(0)



/* miscellaneous configuration options */
#define UM6_MISC_CONFIG (0x1)
/* bits 0 - 26 ignored */

/* PPS timing enabled */
#define UM6_MISC_CONFIG_GET_PPS(x) \
   (((x) >> 27) & 1)
#define UM6_MISC_CONFIG_SET_PPS(x) \
   do {x |= 1 << 27;} while (0)
#define UM6_MISC_CONFIG_CLEAR_PPS(x) \
   do {x &= ~(1 << 27);} while (0)

/* quaterion estimation enabled */
#define UM6_MISC_CONFIG_GET_QUAT(x) \
   (((x) >> 28) & 1)
#define UM6_MISC_CONFIG_SET_QUAT(x) \
   do {x |= 1 << 28;} while (0)
#define UM6_MISC_CONFIG_CLEAR_QUAT(x) \
   do {x &= ~(1 << 28);} while (0)

/* start-up gyroscope calibration enabled */
#define UM6_MISC_CONFIG_GET_CAL(x) \
   (((x) >> 29) & 1)
#define UM6_MISC_CONFIG_SET_CAL(x) \
   do {x |= 1 << 29;} while (0)
#define UM6_MISC_CONFIG_CLEAR_CAL(x) \
   do {x &= ~(1 << 29);} while (0)

/* EKF accelerometer updated enabled */
#define UM6_MISC_CONFIG_GET_AUE(x) \
   (((x) >> 30) & 1)
#define UM6_MISC_CONFIG_SET_AUE(x) \
   do {x |= 1 << 30;} while (0)
#define UM6_MISC_CONFIG_CLEAR_AUE(x) \
   do {x &= ~(1 << 30);} while (0)

/* EKF magnetometer updates enabled */
#define UM6_MISC_CONFIG_GET_MUE(x) \
   (((x) >> 31) & 1)
#define UM6_MISC_CONFIG_SET_MUE(x) \
   do {x |= 1 << 31;} while (0)
#define UM6_MISC_CONFIG_CLEAR_MUE(x) \
   do {x &= ~(1 << 31);} while (0)

#define UM6_MISC_CONFIG_DEBUG(x) \
   do { printf("MISC_CONFIG: PPS = %X, "\
      "QUAT = %X, "\
      "CAL = %X, "\
      "AUE = %X, "\
      "MUE = %X\n", UM6_MISC_CONFIG_GET_PPS(x), \
      UM6_MISC_CONFIG_GET_QUAT(x), \
      UM6_MISC_CONFIG_GET_CAL(x), \
      UM6_MISC_CONFIG_GET_AUE(x), \
      UM6_MISC_CONFIG_GET_MUE(x)); } while(0)



#define UM6_MAG_REF_X (0x2)



#define UM6_MAG_REF_Y (0x3)



#define UM6_MAG_REF_Z (0x4)



#define UM6_ACC_REF_X (0x5)



#define UM6_ACC_REF_Y (0x6)



#define UM6_ACC_REF_Z (0x7)



#define UM6_EKF_MAG_VAR (0x8)



#define UM6_EKF_ACC_VAR (0x9)



#define UM6_EKF_PROC_VAR (0xa)



#define UM6_GYRO_BIAS_XY (0xb)
#define UM6_GYRO_BIAS_XY_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GYRO_BIAS_XY_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_GYRO_BIAS_XY_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_GYRO_BIAS_XY_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_GYRO_BIAS_XY_DEBUG(x) \
   do { printf("GYRO_BIAS_XY: X = %X, "\
      "Y = %X\n", UM6_GYRO_BIAS_XY_GET_X(x), \
      UM6_GYRO_BIAS_XY_GET_Y(x)); } while(0)



#define UM6_GYRO_BIAS_Z (0xc)
#define UM6_GYRO_BIAS_Z_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GYRO_BIAS_Z_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_GYRO_BIAS_Z_DEBUG(x) \
   do { printf("GYRO_BIAS_Z: X = %X\n", UM6_GYRO_BIAS_Z_GET_X(x)); } while(0)



#define UM6_ACC_BIAS_XY (0xd)
#define UM6_ACC_BIAS_XY_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_ACC_BIAS_XY_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_ACC_BIAS_XY_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_ACC_BIAS_XY_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_ACC_BIAS_XY_DEBUG(x) \
   do { printf("ACC_BIAS_XY: X = %X, "\
      "Y = %X\n", UM6_ACC_BIAS_XY_GET_X(x), \
      UM6_ACC_BIAS_XY_GET_Y(x)); } while(0)



#define UM6_ACC_BIAS_Z (0xe)
#define UM6_ACC_BIAS_Z_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_ACC_BIAS_Z_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_ACC_BIAS_Z_DEBUG(x) \
   do { printf("ACC_BIAS_Z: X = %X\n", UM6_ACC_BIAS_Z_GET_X(x)); } while(0)



#define UM6_MAG_BIAS_XY (0xf)
#define UM6_MAG_BIAS_XY_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_MAG_BIAS_XY_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_MAG_BIAS_XY_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_MAG_BIAS_XY_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_MAG_BIAS_XY_DEBUG(x) \
   do { printf("MAG_BIAS_XY: X = %X, "\
      "Y = %X\n", UM6_MAG_BIAS_XY_GET_X(x), \
      UM6_MAG_BIAS_XY_GET_Y(x)); } while(0)



#define UM6_MAG_BIAS_Z (0x10)
#define UM6_MAG_BIAS_Z_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_MAG_BIAS_Z_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_MAG_BIAS_Z_DEBUG(x) \
   do { printf("MAG_BIAS_Z: X = %X\n", UM6_MAG_BIAS_Z_GET_X(x)); } while(0)



#define UM6_ACC_CAL_00 (0x11)



#define UM6_ACC_CAL_01 (0x12)



#define UM6_ACC_CAL_02 (0x13)



#define UM6_ACC_CAL_11 (0x14)



#define UM6_ACC_CAL_12 (0x15)



#define UM6_ACC_CAL_13 (0x16)



#define UM6_ACC_CAL_21 (0x16)



#define UM6_ACC_CAL_22 (0x18)



#define UM6_ACC_CAL_23 (0x19)



#define UM6_GYRO_CAL_00 (0x1a)



#define UM6_GYRO_CAL_01 (0x1b)



#define UM6_GYRO_CAL_02 (0x1c)



#define UM6_GYRO_CAL_11 (0x1d)



#define UM6_GYRO_CAL_12 (0x1e)



#define UM6_GYRO_CAL_13 (0x1f)



#define UM6_GYRO_CAL_21 (0x20)



#define UM6_GYRO_CAL_22 (0x21)



#define UM6_GYRO_CAL_23 (0x22)



#define UM6_MAG_CAL_00 (0x23)



#define UM6_MAG_CAL_01 (0x24)



#define UM6_MAG_CAL_02 (0x25)



#define UM6_MAG_CAL_11 (0x26)



#define UM6_MAG_CAL_12 (0x27)



#define UM6_MAG_CAL_13 (0x28)



#define UM6_MAG_CAL_21 (0x29)



#define UM6_MAG_CAL_22 (0x2a)



#define UM6_MAG_CAL_23 (0x2b)



#define UM6_GYROX_BIAS_C0 (0x2c)



#define UM6_GYROX_BIAS_C1 (0x2d)



#define UM6_GYROX_BIAS_C2 (0x2e)



#define UM6_GYROX_BIAS_C3 (0x2f)



#define UM6_GYROY_BIAS_C0 (0x30)



#define UM6_GYROY_BIAS_C1 (0x31)



#define UM6_GYROY_BIAS_C2 (0x32)



#define UM6_GYROY_BIAS_C3 (0x33)



#define UM6_GYROZ_BIAS_C0 (0x34)



#define UM6_GYROZ_BIAS_C1 (0x35)



#define UM6_GYROZ_BIAS_C2 (0x36)



#define UM6_GYROZ_BIAS_C3 (0x37)



/* status */
#define UM6_STATUS (0x55)
/* self-test complete */
#define UM6_STATUS_GET_ST(x) \
   (((x) >> 0) & 1)
#define UM6_STATUS_SET_ST(x) \
   do {x |= 1 << 0;} while (0)
#define UM6_STATUS_CLEAR_ST(x) \
   do {x &= ~(1 << 0);} while (0)

/* bits 1 - 12 ignored */

/* magnetometer data delay */
#define UM6_STATUS_GET_MAG_DEL(x) \
   (((x) >> 13) & 1)
#define UM6_STATUS_SET_MAG_DEL(x) \
   do {x |= 1 << 13;} while (0)
#define UM6_STATUS_CLEAR_MAG_DEL(x) \
   do {x &= ~(1 << 13);} while (0)

/* accelerometer date delay */
#define UM6_STATUS_GET_ACC_DEL(x) \
   (((x) >> 14) & 1)
#define UM6_STATUS_SET_ACC_DEL(x) \
   do {x |= 1 << 14;} while (0)
#define UM6_STATUS_CLEAR_ACC_DEL(x) \
   do {x &= ~(1 << 14);} while (0)

/* gyroscope data delay */
#define UM6_STATUS_GET_GYR_DEL(x) \
   (((x) >> 15) & 1)
#define UM6_STATUS_SET_GYR_DEL(x) \
   do {x |= 1 << 15;} while (0)
#define UM6_STATUS_CLEAR_GYR_DEL(x) \
   do {x &= ~(1 << 15);} while (0)

/* extended kalman filter diverged */
#define UM6_STATUS_GET_EKF_DIV(x) \
   (((x) >> 16) & 1)
#define UM6_STATUS_SET_EKF_DIV(x) \
   do {x |= 1 << 16;} while (0)
#define UM6_STATUS_CLEAR_EKF_DIV(x) \
   do {x &= ~(1 << 16);} while (0)

/* magnetometer bus error */
#define UM6_STATUS_GET_BUS_MAG(x) \
   (((x) >> 17) & 1)
#define UM6_STATUS_SET_BUS_MAG(x) \
   do {x |= 1 << 17;} while (0)
#define UM6_STATUS_CLEAR_BUS_MAG(x) \
   do {x &= ~(1 << 17);} while (0)

/* accelerometer bus error */
#define UM6_STATUS_GET_BUS_ACC(x) \
   (((x) >> 18) & 1)
#define UM6_STATUS_SET_BUS_ACC(x) \
   do {x |= 1 << 18;} while (0)
#define UM6_STATUS_CLEAR_BUS_ACC(x) \
   do {x &= ~(1 << 18);} while (0)

/* gyroscope bus error */
#define UM6_STATUS_GET_BUS_GYR(x) \
   (((x) >> 19) & 1)
#define UM6_STATUS_SET_BUS_GYR(x) \
   do {x |= 1 << 19;} while (0)
#define UM6_STATUS_CLEAR_BUS_GYR(x) \
   do {x &= ~(1 << 19);} while (0)

/* self-test failed for magnetometer z axis */
#define UM6_STATUS_GET_ST_MZ(x) \
   (((x) >> 20) & 1)
#define UM6_STATUS_SET_ST_MZ(x) \
   do {x |= 1 << 20;} while (0)
#define UM6_STATUS_CLEAR_ST_MZ(x) \
   do {x &= ~(1 << 20);} while (0)

/* self-test failed for magnetometer y axis */
#define UM6_STATUS_GET_ST_MY(x) \
   (((x) >> 21) & 1)
#define UM6_STATUS_SET_ST_MY(x) \
   do {x |= 1 << 21;} while (0)
#define UM6_STATUS_CLEAR_ST_MY(x) \
   do {x &= ~(1 << 21);} while (0)

/* self-test failed for magnetometer x axis */
#define UM6_STATUS_GET_ST_MX(x) \
   (((x) >> 22) & 1)
#define UM6_STATUS_SET_ST_MX(x) \
   do {x |= 1 << 22;} while (0)
#define UM6_STATUS_CLEAR_ST_MX(x) \
   do {x &= ~(1 << 22);} while (0)

/* self-test failed for accelerometer z axis */
#define UM6_STATUS_GET_ST_AZ(x) \
   (((x) >> 23) & 1)
#define UM6_STATUS_SET_ST_AZ(x) \
   do {x |= 1 << 23;} while (0)
#define UM6_STATUS_CLEAR_ST_AZ(x) \
   do {x &= ~(1 << 23);} while (0)

/* self-test failed for accelerometer y axis */
#define UM6_STATUS_GET_ST_AY(x) \
   (((x) >> 24) & 1)
#define UM6_STATUS_SET_ST_AY(x) \
   do {x |= 1 << 24;} while (0)
#define UM6_STATUS_CLEAR_ST_AY(x) \
   do {x &= ~(1 << 24);} while (0)

/* self-test failed for accelerometer x axis */
#define UM6_STATUS_GET_ST_AX(x) \
   (((x) >> 25) & 1)
#define UM6_STATUS_SET_ST_AX(x) \
   do {x |= 1 << 25;} while (0)
#define UM6_STATUS_CLEAR_ST_AX(x) \
   do {x &= ~(1 << 25);} while (0)

/* self-test failed for gyroscope z axis */
#define UM6_STATUS_GET_ST_GZ(x) \
   (((x) >> 26) & 1)
#define UM6_STATUS_SET_ST_GZ(x) \
   do {x |= 1 << 26;} while (0)
#define UM6_STATUS_CLEAR_ST_GZ(x) \
   do {x &= ~(1 << 26);} while (0)

/* self-test failed for gyroscope y axis */
#define UM6_STATUS_GET_ST_GY(x) \
   (((x) >> 27) & 1)
#define UM6_STATUS_SET_ST_GY(x) \
   do {x |= 1 << 27;} while (0)
#define UM6_STATUS_CLEAR_ST_GY(x) \
   do {x &= ~(1 << 27);} while (0)

/* self-test failed for gyroscope x axis */
#define UM6_STATUS_GET_ST_GX(x) \
   (((x) >> 28) & 1)
#define UM6_STATUS_SET_ST_GX(x) \
   do {x |= 1 << 28;} while (0)
#define UM6_STATUS_CLEAR_ST_GX(x) \
   do {x &= ~(1 << 28);} while (0)

/* gyroscope init failed */
#define UM6_STATUS_GET_GYR_INI(x) \
   (((x) >> 29) & 1)
#define UM6_STATUS_SET_GYR_INI(x) \
   do {x |= 1 << 29;} while (0)
#define UM6_STATUS_CLEAR_GYR_INI(x) \
   do {x &= ~(1 << 29);} while (0)

/* accelerometer init failed */
#define UM6_STATUS_GET_ACC_INI(x) \
   (((x) >> 30) & 1)
#define UM6_STATUS_SET_ACC_INI(x) \
   do {x |= 1 << 30;} while (0)
#define UM6_STATUS_CLEAR_ACC_INI(x) \
   do {x &= ~(1 << 30);} while (0)

/* magnetometer init failed */
#define UM6_STATUS_GET_MAG_INI(x) \
   (((x) >> 31) & 1)
#define UM6_STATUS_SET_MAG_INI(x) \
   do {x |= 1 << 31;} while (0)
#define UM6_STATUS_CLEAR_MAG_INI(x) \
   do {x &= ~(1 << 31);} while (0)

#define UM6_STATUS_DEBUG(x) \
   do { printf("STATUS: ST = %X, "\
      "MAG_DEL = %X, "\
      "ACC_DEL = %X, "\
      "GYR_DEL = %X, "\
      "EKF_DIV = %X, "\
      "BUS_MAG = %X, "\
      "BUS_ACC = %X, "\
      "BUS_GYR = %X, "\
      "ST_MZ = %X, "\
      "ST_MY = %X, "\
      "ST_MX = %X, "\
      "ST_AZ = %X, "\
      "ST_AY = %X, "\
      "ST_AX = %X, "\
      "ST_GZ = %X, "\
      "ST_GY = %X, "\
      "ST_GX = %X, "\
      "GYR_INI = %X, "\
      "ACC_INI = %X, "\
      "MAG_INI = %X\n", UM6_STATUS_GET_ST(x), \
      UM6_STATUS_GET_MAG_DEL(x), \
      UM6_STATUS_GET_ACC_DEL(x), \
      UM6_STATUS_GET_GYR_DEL(x), \
      UM6_STATUS_GET_EKF_DIV(x), \
      UM6_STATUS_GET_BUS_MAG(x), \
      UM6_STATUS_GET_BUS_ACC(x), \
      UM6_STATUS_GET_BUS_GYR(x), \
      UM6_STATUS_GET_ST_MZ(x), \
      UM6_STATUS_GET_ST_MY(x), \
      UM6_STATUS_GET_ST_MX(x), \
      UM6_STATUS_GET_ST_AZ(x), \
      UM6_STATUS_GET_ST_AY(x), \
      UM6_STATUS_GET_ST_AX(x), \
      UM6_STATUS_GET_ST_GZ(x), \
      UM6_STATUS_GET_ST_GY(x), \
      UM6_STATUS_GET_ST_GX(x), \
      UM6_STATUS_GET_GYR_INI(x), \
      UM6_STATUS_GET_ACC_INI(x), \
      UM6_STATUS_GET_MAG_INI(x)); } while(0)



#define UM6_GYRO_RAW1 (0x56)
#define UM6_GYRO_RAW1_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GYRO_RAW1_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_GYRO_RAW1_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_GYRO_RAW1_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_GYRO_RAW1_DEBUG(x) \
   do { printf("GYRO_RAW1: X = %X, "\
      "Y = %X\n", UM6_GYRO_RAW1_GET_X(x), \
      UM6_GYRO_RAW1_GET_Y(x)); } while(0)



#define UM6_GYRO_RAW2 (0x57)
#define UM6_GYRO_RAW2_GET_Z(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GYRO_RAW2_SET_Z(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_GYRO_RAW2_DEBUG(x) \
   do { printf("GYRO_RAW2: Z = %X\n", UM6_GYRO_RAW2_GET_Z(x)); } while(0)



#define UM6_ACC_RAW1 (0x58)
#define UM6_ACC_RAW1_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_ACC_RAW1_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_ACC_RAW1_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_ACC_RAW1_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_ACC_RAW1_DEBUG(x) \
   do { printf("ACC_RAW1: X = %X, "\
      "Y = %X\n", UM6_ACC_RAW1_GET_X(x), \
      UM6_ACC_RAW1_GET_Y(x)); } while(0)



#define UM6_ACC_RAW2 (0x59)
#define UM6_ACC_RAW2_GET_Z(x) \
   (((x) >> 0) & 0xffff)
#define UM6_ACC_RAW2_SET_Z(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_ACC_RAW2_DEBUG(x) \
   do { printf("ACC_RAW2: Z = %X\n", UM6_ACC_RAW2_GET_Z(x)); } while(0)



#define UM6_MAG_RAW1 (0x5a)
#define UM6_MAG_RAW1_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_MAG_RAW1_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_MAG_RAW1_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_MAG_RAW1_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_MAG_RAW1_DEBUG(x) \
   do { printf("MAG_RAW1: X = %X, "\
      "Y = %X\n", UM6_MAG_RAW1_GET_X(x), \
      UM6_MAG_RAW1_GET_Y(x)); } while(0)



#define UM6_MAG_RAW2 (0x5b)
#define UM6_MAG_RAW2_GET_Z(x) \
   (((x) >> 0) & 0xffff)
#define UM6_MAG_RAW2_SET_Z(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_MAG_RAW2_DEBUG(x) \
   do { printf("MAG_RAW2: Z = %X\n", UM6_MAG_RAW2_GET_Z(x)); } while(0)



#define UM6_GYRO_PROC1 (0x5c)
#define UM6_GYRO_PROC1_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GYRO_PROC1_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_GYRO_PROC1_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_GYRO_PROC1_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_GYRO_PROC1_DEBUG(x) \
   do { printf("GYRO_PROC1: X = %X, "\
      "Y = %X\n", UM6_GYRO_PROC1_GET_X(x), \
      UM6_GYRO_PROC1_GET_Y(x)); } while(0)



#define UM6_GYRO_PROC2 (0x5d)
#define UM6_GYRO_PROC2_GET_Z(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GYRO_PROC2_SET_Z(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_GYRO_PROC2_DEBUG(x) \
   do { printf("GYRO_PROC2: Z = %X\n", UM6_GYRO_PROC2_GET_Z(x)); } while(0)



#define UM6_ACC_PROC1 (0x5e)
#define UM6_ACC_PROC1_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_ACC_PROC1_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_ACC_PROC1_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_ACC_PROC1_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_ACC_PROC1_DEBUG(x) \
   do { printf("ACC_PROC1: X = %X, "\
      "Y = %X\n", UM6_ACC_PROC1_GET_X(x), \
      UM6_ACC_PROC1_GET_Y(x)); } while(0)



#define UM6_ACC_PROC2 (0x5f)
#define UM6_ACC_PROC2_GET_Z(x) \
   (((x) >> 0) & 0xffff)
#define UM6_ACC_PROC2_SET_Z(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_ACC_PROC2_DEBUG(x) \
   do { printf("ACC_PROC2: Z = %X\n", UM6_ACC_PROC2_GET_Z(x)); } while(0)



#define UM6_MAG_PROC1 (0x60)
#define UM6_MAG_PROC1_GET_X(x) \
   (((x) >> 0) & 0xffff)
#define UM6_MAG_PROC1_SET_X(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_MAG_PROC1_GET_Y(x) \
   (((x) >> 16) & 0xffff)
#define UM6_MAG_PROC1_SET_Y(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_MAG_PROC1_DEBUG(x) \
   do { printf("MAG_PROC1: X = %X, "\
      "Y = %X\n", UM6_MAG_PROC1_GET_X(x), \
      UM6_MAG_PROC1_GET_Y(x)); } while(0)



#define UM6_MAG_PROC2 (0x61)
#define UM6_MAG_PROC2_GET_Z(x) \
   (((x) >> 0) & 0xffff)
#define UM6_MAG_PROC2_SET_Z(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_MAG_PROC2_DEBUG(x) \
   do { printf("MAG_PROC2: Z = %X\n", UM6_MAG_PROC2_GET_Z(x)); } while(0)



#define UM6_EULER1 (0x62)
#define UM6_EULER1_GET_PHI(x) \
   (((x) >> 0) & 0xffff)
#define UM6_EULER1_SET_PHI(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_EULER1_GET_THETA(x) \
   (((x) >> 16) & 0xffff)
#define UM6_EULER1_SET_THETA(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_EULER1_DEBUG(x) \
   do { printf("EULER1: PHI = %X, "\
      "THETA = %X\n", UM6_EULER1_GET_PHI(x), \
      UM6_EULER1_GET_THETA(x)); } while(0)



#define UM6_EULER2 (0x63)
#define UM6_EULER2_GET_PSI(x) \
   (((x) >> 0) & 0xffff)
#define UM6_EULER2_SET_PSI(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

/* bits 16 - 31 ignored */

#define UM6_EULER2_DEBUG(x) \
   do { printf("EULER2: PSI = %X\n", UM6_EULER2_GET_PSI(x)); } while(0)



#define UM6_QUAT1 (0x64)
#define UM6_QUAT1_GET_A(x) \
   (((x) >> 0) & 0xffff)
#define UM6_QUAT1_SET_A(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_QUAT1_GET_B(x) \
   (((x) >> 16) & 0xffff)
#define UM6_QUAT1_SET_B(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_QUAT1_DEBUG(x) \
   do { printf("QUAT1: A = %X, "\
      "B = %X\n", UM6_QUAT1_GET_A(x), \
      UM6_QUAT1_GET_B(x)); } while(0)



#define UM6_QUAT2 (0x65)
#define UM6_QUAT2_GET_C(x) \
   (((x) >> 0) & 0xffff)
#define UM6_QUAT2_SET_C(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_QUAT2_GET_D(x) \
   (((x) >> 16) & 0xffff)
#define UM6_QUAT2_SET_D(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_QUAT2_DEBUG(x) \
   do { printf("QUAT2: C = %X, "\
      "D = %X\n", UM6_QUAT2_GET_C(x), \
      UM6_QUAT2_GET_D(x)); } while(0)



#define UM6_ERROR_COV_00 (0x66)



#define UM6_ERROR_COV_01 (0x67)



#define UM6_ERROR_COV_02 (0x68)



#define UM6_ERROR_COV_03 (0x69)



#define UM6_ERROR_COV_10 (0x6a)



#define UM6_ERROR_COV_11 (0x6b)



#define UM6_ERROR_COV_12 (0x6c)



#define UM6_ERROR_COV_13 (0x6d)



#define UM6_ERROR_COV_20 (0x6e)



#define UM6_ERROR_COV_21 (0x6f)



#define UM6_ERROR_COV_22 (0x70)



#define UM6_ERROR_COV_23 (0x71)



#define UM6_ERROR_COV_30 (0x72)



#define UM6_ERROR_COV_31 (0x73)



#define UM6_ERROR_COV_32 (0x74)



#define UM6_ERROR_COV_33 (0x75)



#define UM6_TEMPERATURE (0x76)



#define UM6_GPS_LONGITUDE (0x77)



#define UM6_GPS_LATITUDE (0x78)



#define UM6_GPS_ALTITUDE (0x79)



#define UM6_GPS_POS_NORTH (0x7a)



#define UM6_GPS_POS_EAST (0x7b)



#define UM6_GPS_POS_HEIGHT (0x7c)



#define UM6_GPS_COURSE_SPEED (0x7d)
#define UM6_GPS_COURSE_SPEED_GET_COURCE(x) \
   (((x) >> 0) & 0xffff)
#define UM6_GPS_COURSE_SPEED_SET_COURCE(x, v) \
   do {x &= ~(0xffff << 0); x |= (v & 0xffff) << 0;} while(0)

#define UM6_GPS_COURSE_SPEED_GET_SPEED(x) \
   (((x) >> 16) & 0xffff)
#define UM6_GPS_COURSE_SPEED_SET_SPEED(x, v) \
   do {x &= ~(0xffff << 16); x |= (v & 0xffff) << 16;} while(0)

#define UM6_GPS_COURSE_SPEED_DEBUG(x) \
   do { printf("GPS_COURSE_SPEED: COURCE = %X, "\
      "SPEED = %X\n", UM6_GPS_COURSE_SPEED_GET_COURCE(x), \
      UM6_GPS_COURSE_SPEED_GET_SPEED(x)); } while(0)



/* status */
#define UM6_GPS_SAT_SUMMARY (0x7e)
/* fix mode */
#define UM6_GPS_SAT_SUMMARY_GET_MODE(x) \
   (((x) >> 0) & 0x3)
#define UM6_GPS_SAT_SUMMARY_SET_MODE(x, v) \
   do {x &= ~(0x3 << 0); x |= (v & 0x3) << 0;} while(0)

/* satellite count */
#define UM6_GPS_SAT_SUMMARY_GET_SAT_COUNT(x) \
   (((x) >> 2) & 0xf)
#define UM6_GPS_SAT_SUMMARY_SET_SAT_COUNT(x, v) \
   do {x &= ~(0xf << 2); x |= (v & 0xf) << 2;} while(0)

/* horizontal dillusion of precision */
#define UM6_GPS_SAT_SUMMARY_GET_HDOP(x) \
   (((x) >> 6) & 0x3ff)
#define UM6_GPS_SAT_SUMMARY_SET_HDOP(x, v) \
   do {x &= ~(0x3ff << 6); x |= (v & 0x3ff) << 6;} while(0)

/* vertical dillusion of precision */
#define UM6_GPS_SAT_SUMMARY_GET_VDOP(x) \
   (((x) >> 16) & 0x3ff)
#define UM6_GPS_SAT_SUMMARY_SET_VDOP(x, v) \
   do {x &= ~(0x3ff << 16); x |= (v & 0x3ff) << 16;} while(0)

/* bits 26 - 31 ignored */

#define UM6_GPS_SAT_SUMMARY_DEBUG(x) \
   do { printf("GPS_SAT_SUMMARY: MODE = %X, "\
      "SAT_COUNT = %X, "\
      "HDOP = %X, "\
      "VDOP = %X\n", UM6_GPS_SAT_SUMMARY_GET_MODE(x), \
      UM6_GPS_SAT_SUMMARY_GET_SAT_COUNT(x), \
      UM6_GPS_SAT_SUMMARY_GET_HDOP(x), \
      UM6_GPS_SAT_SUMMARY_GET_VDOP(x)); } while(0)



#define UM6_GPS_SAT_XY_0 (0x7f)
#define UM6_GPS_SAT_XY_0_GET_X_ID(x) \
   (((x) >> 0) & 0xff)
#define UM6_GPS_SAT_XY_0_SET_X_ID(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

#define UM6_GPS_SAT_XY_0_GET_X_SNR(x) \
   (((x) >> 8) & 0xff)
#define UM6_GPS_SAT_XY_0_SET_X_SNR(x, v) \
   do {x &= ~(0xff << 8); x |= (v & 0xff) << 8;} while(0)

#define UM6_GPS_SAT_XY_0_GET_Y_ID(x) \
   (((x) >> 16) & 0xff)
#define UM6_GPS_SAT_XY_0_SET_Y_ID(x, v) \
   do {x &= ~(0xff << 16); x |= (v & 0xff) << 16;} while(0)

#define UM6_GPS_SAT_XY_0_GET_Y_SNR(x) \
   (((x) >> 24) & 0xff)
#define UM6_GPS_SAT_XY_0_SET_Y_SNR(x, v) \
   do {x &= ~(0xff << 24); x |= (v & 0xff) << 24;} while(0)

#define UM6_GPS_SAT_XY_0_DEBUG(x) \
   do { printf("GPS_SAT_XY_0: X_ID = %X, "\
      "X_SNR = %X, "\
      "Y_ID = %X, "\
      "Y_SNR = %X\n", UM6_GPS_SAT_XY_0_GET_X_ID(x), \
      UM6_GPS_SAT_XY_0_GET_X_SNR(x), \
      UM6_GPS_SAT_XY_0_GET_Y_ID(x), \
      UM6_GPS_SAT_XY_0_GET_Y_SNR(x)); } while(0)



#define UM6_GPS_SAT_XY_1 (0x80)
#define UM6_GPS_SAT_XY_1_GET_X_ID(x) \
   (((x) >> 0) & 0xff)
#define UM6_GPS_SAT_XY_1_SET_X_ID(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

#define UM6_GPS_SAT_XY_1_GET_X_SNR(x) \
   (((x) >> 8) & 0xff)
#define UM6_GPS_SAT_XY_1_SET_X_SNR(x, v) \
   do {x &= ~(0xff << 8); x |= (v & 0xff) << 8;} while(0)

#define UM6_GPS_SAT_XY_1_GET_Y_ID(x) \
   (((x) >> 16) & 0xff)
#define UM6_GPS_SAT_XY_1_SET_Y_ID(x, v) \
   do {x &= ~(0xff << 16); x |= (v & 0xff) << 16;} while(0)

#define UM6_GPS_SAT_XY_1_GET_Y_SNR(x) \
   (((x) >> 24) & 0xff)
#define UM6_GPS_SAT_XY_1_SET_Y_SNR(x, v) \
   do {x &= ~(0xff << 24); x |= (v & 0xff) << 24;} while(0)

#define UM6_GPS_SAT_XY_1_DEBUG(x) \
   do { printf("GPS_SAT_XY_1: X_ID = %X, "\
      "X_SNR = %X, "\
      "Y_ID = %X, "\
      "Y_SNR = %X\n", UM6_GPS_SAT_XY_1_GET_X_ID(x), \
      UM6_GPS_SAT_XY_1_GET_X_SNR(x), \
      UM6_GPS_SAT_XY_1_GET_Y_ID(x), \
      UM6_GPS_SAT_XY_1_GET_Y_SNR(x)); } while(0)



#define UM6_GPS_SAT_XY_2 (0x81)
#define UM6_GPS_SAT_XY_2_GET_X_ID(x) \
   (((x) >> 0) & 0xff)
#define UM6_GPS_SAT_XY_2_SET_X_ID(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

#define UM6_GPS_SAT_XY_2_GET_X_SNR(x) \
   (((x) >> 8) & 0xff)
#define UM6_GPS_SAT_XY_2_SET_X_SNR(x, v) \
   do {x &= ~(0xff << 8); x |= (v & 0xff) << 8;} while(0)

#define UM6_GPS_SAT_XY_2_GET_Y_ID(x) \
   (((x) >> 16) & 0xff)
#define UM6_GPS_SAT_XY_2_SET_Y_ID(x, v) \
   do {x &= ~(0xff << 16); x |= (v & 0xff) << 16;} while(0)

#define UM6_GPS_SAT_XY_2_GET_Y_SNR(x) \
   (((x) >> 24) & 0xff)
#define UM6_GPS_SAT_XY_2_SET_Y_SNR(x, v) \
   do {x &= ~(0xff << 24); x |= (v & 0xff) << 24;} while(0)

#define UM6_GPS_SAT_XY_2_DEBUG(x) \
   do { printf("GPS_SAT_XY_2: X_ID = %X, "\
      "X_SNR = %X, "\
      "Y_ID = %X, "\
      "Y_SNR = %X\n", UM6_GPS_SAT_XY_2_GET_X_ID(x), \
      UM6_GPS_SAT_XY_2_GET_X_SNR(x), \
      UM6_GPS_SAT_XY_2_GET_Y_ID(x), \
      UM6_GPS_SAT_XY_2_GET_Y_SNR(x)); } while(0)



#define UM6_GPS_SAT_XY_3 (0x82)
#define UM6_GPS_SAT_XY_3_GET_X_ID(x) \
   (((x) >> 0) & 0xff)
#define UM6_GPS_SAT_XY_3_SET_X_ID(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

#define UM6_GPS_SAT_XY_3_GET_X_SNR(x) \
   (((x) >> 8) & 0xff)
#define UM6_GPS_SAT_XY_3_SET_X_SNR(x, v) \
   do {x &= ~(0xff << 8); x |= (v & 0xff) << 8;} while(0)

#define UM6_GPS_SAT_XY_3_GET_Y_ID(x) \
   (((x) >> 16) & 0xff)
#define UM6_GPS_SAT_XY_3_SET_Y_ID(x, v) \
   do {x &= ~(0xff << 16); x |= (v & 0xff) << 16;} while(0)

#define UM6_GPS_SAT_XY_3_GET_Y_SNR(x) \
   (((x) >> 24) & 0xff)
#define UM6_GPS_SAT_XY_3_SET_Y_SNR(x, v) \
   do {x &= ~(0xff << 24); x |= (v & 0xff) << 24;} while(0)

#define UM6_GPS_SAT_XY_3_DEBUG(x) \
   do { printf("GPS_SAT_XY_3: X_ID = %X, "\
      "X_SNR = %X, "\
      "Y_ID = %X, "\
      "Y_SNR = %X\n", UM6_GPS_SAT_XY_3_GET_X_ID(x), \
      UM6_GPS_SAT_XY_3_GET_X_SNR(x), \
      UM6_GPS_SAT_XY_3_GET_Y_ID(x), \
      UM6_GPS_SAT_XY_3_GET_Y_SNR(x)); } while(0)



#define UM6_GPS_SAT_XY_4 (0x83)
#define UM6_GPS_SAT_XY_4_GET_X_ID(x) \
   (((x) >> 0) & 0xff)
#define UM6_GPS_SAT_XY_4_SET_X_ID(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

#define UM6_GPS_SAT_XY_4_GET_X_SNR(x) \
   (((x) >> 8) & 0xff)
#define UM6_GPS_SAT_XY_4_SET_X_SNR(x, v) \
   do {x &= ~(0xff << 8); x |= (v & 0xff) << 8;} while(0)

#define UM6_GPS_SAT_XY_4_GET_Y_ID(x) \
   (((x) >> 16) & 0xff)
#define UM6_GPS_SAT_XY_4_SET_Y_ID(x, v) \
   do {x &= ~(0xff << 16); x |= (v & 0xff) << 16;} while(0)

#define UM6_GPS_SAT_XY_4_GET_Y_SNR(x) \
   (((x) >> 24) & 0xff)
#define UM6_GPS_SAT_XY_4_SET_Y_SNR(x, v) \
   do {x &= ~(0xff << 24); x |= (v & 0xff) << 24;} while(0)

#define UM6_GPS_SAT_XY_4_DEBUG(x) \
   do { printf("GPS_SAT_XY_4: X_ID = %X, "\
      "X_SNR = %X, "\
      "Y_ID = %X, "\
      "Y_SNR = %X\n", UM6_GPS_SAT_XY_4_GET_X_ID(x), \
      UM6_GPS_SAT_XY_4_GET_X_SNR(x), \
      UM6_GPS_SAT_XY_4_GET_Y_ID(x), \
      UM6_GPS_SAT_XY_4_GET_Y_SNR(x)); } while(0)



#define UM6_GPS_SAT_XY_5 (0x84)
#define UM6_GPS_SAT_XY_5_GET_X_ID(x) \
   (((x) >> 0) & 0xff)
#define UM6_GPS_SAT_XY_5_SET_X_ID(x, v) \
   do {x &= ~(0xff << 0); x |= (v & 0xff) << 0;} while(0)

#define UM6_GPS_SAT_XY_5_GET_X_SNR(x) \
   (((x) >> 8) & 0xff)
#define UM6_GPS_SAT_XY_5_SET_X_SNR(x, v) \
   do {x &= ~(0xff << 8); x |= (v & 0xff) << 8;} while(0)

#define UM6_GPS_SAT_XY_5_GET_Y_ID(x) \
   (((x) >> 16) & 0xff)
#define UM6_GPS_SAT_XY_5_SET_Y_ID(x, v) \
   do {x &= ~(0xff << 16); x |= (v & 0xff) << 16;} while(0)

#define UM6_GPS_SAT_XY_5_GET_Y_SNR(x) \
   (((x) >> 24) & 0xff)
#define UM6_GPS_SAT_XY_5_SET_Y_SNR(x, v) \
   do {x &= ~(0xff << 24); x |= (v & 0xff) << 24;} while(0)

#define UM6_GPS_SAT_XY_5_DEBUG(x) \
   do { printf("GPS_SAT_XY_5: X_ID = %X, "\
      "X_SNR = %X, "\
      "Y_ID = %X, "\
      "Y_SNR = %X\n", UM6_GPS_SAT_XY_5_GET_X_ID(x), \
      UM6_GPS_SAT_XY_5_GET_X_SNR(x), \
      UM6_GPS_SAT_XY_5_GET_Y_ID(x), \
      UM6_GPS_SAT_XY_5_GET_Y_SNR(x)); } while(0)



#define UM6_GET_FW_VERSION (0xaa)



#define UM6_FLASH_COMMIT (0xab)



#define UM6_ZERO_GYROS (0xac)



#define UM6_RESET_EKF (0xad)



#define UM6_GET_DATA (0xae)



#define UM6_SET_ACC_REF (0xaf)



#define UM6_SET_MAG_REF (0xb0)



#define UM6_RESET_TO_FACTORY (0xb1)



#define UM6_SET_HOME_POS (0xb3)



#define UM6_BAD_CHECKSUM (0xfd)



#define UM6_UNKNOWN_ADDRESS (0xfe)



#define UM6_INVALID_BATCH_SIZE (0xff)

#endif /* __UM6_REGS_H__ */

